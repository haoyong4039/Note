http://www.cnblogs.com/huhongy/p/7929043.html

MQTT协议实现方式

实现MQTT协议需要：客户端和服务器端
MQTT协议中有三种身份：发布者（Publish）、代理（Broker）（服务器）、订阅者（Subscribe）。其中，消息的发布者和订阅者都是客户端，消息代理是服务器，消息发布者可以同时是订阅者。
MQTT传输的消息分为：主题（Topic）和负载（payload）两部分
Topic，可以理解为消息的类型，订阅者订阅（Subscribe）后，就会收到该主题的消息内容（payload）
payload，可以理解为消息的内容，是指订阅者具体要使用的内容


MQTT流程

①：新建客户端：
// host为主机名，clientid即连接MQTT的客户端ID（自定义），一般以唯一标识符表示，MemoryPersistence设置clientid的保存形式，默认为以内存保存
MqttClient  mqttClient = new MqttClient(url, clientId, new MemoryPersistence());

②：设置连接客户端参数 
MqttConnectOptions mqttConnectOptions = new MqttConnectOptions();

 // 设置是否清空session,这里如果设置为false表示服务器会保留客户端的连接记录，设置为true表示每次连接到服务器都以新的身份连接
mqttConnectOptions.setCleanSession(false);
            
// 设置连接的用户名
mqttConnectOptions.setUserName(admin);
            
// 设置连接的密码
mqttConnectOptions.setPassword(password);
            
// 设置超时时间 单位为秒
mqttConnectOptions.setConnectionTimeout(10);
            
// 设置会话心跳时间 单位为秒 服务器会每隔1.5*20秒的时间向客户端发送个消息判断客户端是否在线，但这个方法并没有重连的机制
mqttConnectOptions.setKeepAliveInterval(30);
            
// 设置回调（Callback必须实现MqttCallback接口，该客户端推送消息后会得到deliveryComplete方法反馈，该客户端订阅的topic出现新消息时，会得到messageArrived方法反馈）
mqttClient.setCallback(new Callback(msgHandler));
            
③：建立连接
mqttClient.connect(mqttConnectOptions);

④：订阅主题
String[] topic = {topic1,topic2};

mqttClient.subscribe(topic, getQos(topic.length));

    private int[] getQos(int topicCount)
    {
        int[] qos = new int[topicCount];
        
        for (int i = 0; i < topicCount; i++)
        {
            qos[i] = 1;
        }
        return qos;
    }

⑤：消息发送
MqttMessage message = new MqttMessage();
            
/**
  * 三种消息传输方式QoS：
  * 
  * 0代表“至多一次”，消息发布完全依赖底层 TCP/IP 网络。会发生消息丢失或重复。这一级别可用于如下情况，环境传感器数据，丢失一次读记录无所谓，因为不久后还会有第二次发送。
  * 1代表“至少一次”，确保消息到达，但消息重复可能会发生。 
  * 2代表“只有一次”，确保消息到达一次。这一级别可用于如下情况，在计费系统中，消息重复或丢失会导致不正确的结果。
  */
message.setQos(1); // 保证消息能到达一次
message.setRetained(true);
message.setPayload(msg.getBytes());
            
MqttDeliveryToken token = mqttClient.getTopic(topic).publish(message);
token.waitForCompletion();
System.out.println("message is published completely! "+ token.isComplete());