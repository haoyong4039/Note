===========================================概念和安装=======================================

概念：
Docker 将应用程序与该程序的依赖，打包在一个文件里面。运行这个文件，就会生成一个虚拟容器。程序在这个虚拟容器里运行，就好像在真实的物理机上运行一样。有了 Docker，就不用担心环境问题。

用途：
（1）提供一次性的环境。比如，本地测试他人的软件、持续集成的时候提供单元测试和构建的环境。

（2）提供弹性的云服务。因为 Docker 容器可以随开随关，很适合动态扩容和缩容。

（3）组建微服务架构。通过多个容器，一台机器可以跑多个服务，因此在本机就可以模拟出微服务架构。

==============================================image操作==============================================
# 概念:
Docker 把应用程序及其依赖，打包在 image 文件里面。只有通过这个文件，才能生成 Docker 容器。image 文件可以看作是容器的模板。Docker 根据 image 文件生成容器的实例。同一个 image 文件，可以生成多个同时运行的容器实例。

# 查找镜像：
我们可以从 Docker Hub 网站来搜索镜像，Docker Hub 网址为： https://hub.docker.com/
$ docker search mysql

# 拉取image：
$ docker image pull library/hello-world

# 查看本机所有image：
$ docker image ls

# 删除image：
$ docker image rm [imageId]

# 重新镜像的tag
$ docker tag [imageId] [newImageName]:[newTag]

==========================================container操作=============================================
# 运行image：
$ docker run hello-world
注意，docker run命令具有自动抓取 image 文件的功能。如果发现本地没有指定的 image 文件，就会从仓库自动抓取。因此，前面的docker image pull命令并不是必需的步骤

# 列出本机正在运行的容器
$ docker ps

# 列出本机所有容器，包括终止运行的容器
$ docker ps -a
$ docker ps --all
$ docker ps -n 3  （显示最后被创建的3个容器）

# 终止运行的容器
$ docker stop [containerID]

# 启动已经终止的容器
$ docker start [containerID]

# 重启正在运行的容器
$ docker restart [containerID]
https://www.cnblogs.com/linjiqin/p/8864981.html

# 终止运行的容器文件，依然会占据硬盘空间，可以使用docker container rm命令删除。
$ docker rm [containerID]

==========================================运行web应用=============================================
# 运行一个web应用:
$ docker run -d -P training/webapp python app.py
$ docker run -d -p 6060:5000 training/webapp python app.py
-d:让容器在后台运行。
-P（大写）:将容器内部使用的网络端口映射到我们使用的主机上。
-p（小写）:指定端口映射，将容器内部的 5000 端口映射到我们本地主机的 5000 端口上。

# 查看端口映射情况
$ docker port [containerID]

# 查看运行的进程
$ docker top [containerID]

# 在容器内使用docker logs命令，查看容器内的标准输出
$ docker logs -f [containerID]

# 检查web容器，使用 docker inspect 来查看Docker的底层信息。它会返回一个 JSON 文件记录着 Docker 容器的配置和状态信息。
$ docker inspect [containerID]


==========================================运行MySQL===============================================
查询所有mysql镜像
$ docker search mysql

拉取指定版本镜像
$ docker pull mysql:5.7
$ docker images

创建宿主机数据存放目录
$ mkdir -p /opt/data/mysql

启动容器并将原3306端口映射为3406端口
$ docker run -d -v /opt/data/mysql/:/var/lib/mysql -p 3406:3306 --name haoyong-mysql -e MYSQL_ROOT_PASSWORD=1234 mysql:5.7
$ docker ps

进入容器
$ docker exec -it haoyong-mysql /bin/bash
测试连接
mysql -uroot -p1234
授权客户端连接
mysql>GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY '1234' WITH GRANT OPTION;

查看宿主机上的mysql数据
$ cd /opt/data/mysql
$ ll