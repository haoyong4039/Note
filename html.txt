============================================禁止缩放===========================================
<meta name="viewport" id="viewport" content="width=device-width,initial-scale=1,minimum-scale=1,maximum-scale=1,user-scalable=no" />

body {
    margin: 0;
    padding: 0;
}
============================================display（显示）======================================
1.隐藏元素 - display:none或visibility:hidden

隐藏一个元素可以通过把display属性设置为"none"，或把visibility属性设置为"hidden"。但是请注意，这两种方法会产生不同的结果。
visibility:hidden可以隐藏某个元素，但隐藏的元素仍需占用与未隐藏之前一样的空间。也就是说，该元素虽然被隐藏了，但仍然会影响布局。

2.Display - 块和内联元素

display:block  -- 显示为块级元素：
总是独占一行，表现为另起一行开始，而且其后的元素也必须另起一行显示;
宽度(width)、高度(height)、内边距(padding)和外边距(margin)都可控制;

display:inline  -- 显示为内联元素：
和相邻的内联元素在同一行;
宽度(width)、高度(height)、内边距的top/bottom(padding-top/padding-bottom)和外边距的top/bottom(margin-top/margin-bottom)都不可改变，就是里面文字或图片的大小;

display:inline-block -- 显示为内联块元素，表现为同行显示并可修改宽高内外边距等属性

============================================position（定位）======================================
定位后的元素位置使用left/top/right/bottom来确定

1.fixed 定位
元素的位置相对于浏览器窗口是固定位置。
即使窗口是滚动的它也不会移动：

2.relative 定位
相对定位元素的定位是相对其正常位置。
即使相对定位元素的内容是移动,预留空间的元素仍保存在正常流动。

3.absolute 定位
绝对定位的元素的位置相对于最近的已定位父元素，如果元素没有已定位的父元素，那么它的位置相对于<html>
未指定left/top/right/bottom的absolute元素，其在所处层级中的定位点就是正常文档流中该元素的定位点。
absolute 定位使元素的位置与文档流无关，因此不占据空间。
absolute 定位的元素和其他元素重叠。

4.sticky 定位
position: sticky; 基于用户的滚动位置来定位。
它的行为就像 position:relative; 而当页面滚动超出目标区域时，它的表现就像 position:fixed;，它会固定在目标位置。

============================================float（对齐居中）======================================
1.如果子元素的高度大于父元素，且子元素设置了浮动，那么子元素将溢出，这时候你可以使用 "clearfix(清除浮动)" 来解决该问题。
.clearfix {overflow: auto;}

2.垂直居中对齐 - 使用 padding
.center {padding: 70px 0;border: 3px solid green;}

3.垂直居中 - 使用 line-height
.center {
    line-height: 200px;
    height: 200px;
    border: 3px solid green;
    text-align: center;
}
 
/* 如果文本有多行，添加以下代码: */
.center p {
    line-height: 1.5;
    display: inline-block;
    vertical-align: middle;
}

============================================组合选择符======================================
1.后代选择器
div元素下的所有p元素
div p
{
  background-color:yellow;
}

2.子元素选择器
div元素下的直系p元素
div>p
{
  background-color:yellow;
}

3.相邻兄弟选择器
div元素相邻的p元素
div+p
{
  background-color:yellow;
}

4.后续兄弟选择器
所有 <div> 元素之后的所有相邻兄弟元素 <p> : 
div~p
{
  background-color:yellow;
}

============================================伪类======================================
1.超链接a
a:link {color:gray;}      /* 未访问链接*/
a:visited {color:red;}  /* 已访问链接 */
a:hover {color:blue;}  /* 鼠标移动到链接上 */
a:active {color:black;}  /* 鼠标点击时 */

2.first-child 伪类
第一个p元素   p:first-child
第一个p元素下的所有i元素   p:first-child i
p元素下的第一个i元素   p i:first-child

============================================导航栏=链接列表======================================
1.垂直导航栏
（1）list-style-type:none - 移除列表前小标志。一个导航栏并不需要列表标记
ul {list-style-type: none; margin: 0;padding: 0;width: 200px;background-color: #f1f1f1;}
（2）display:block - 显示块元素的链接，让整体变为可点击链接区域（不只是文本），它允许我们指定宽度
li a {display: block;color: #000;padding: 8px 16px;text-decoration: none;}
（3）鼠标移动到选项上修改背景颜色
li a:hover {background-color: #555;color: white;}
（4）在点击了选项后，我们可以添加 "active" 类来标准哪个选项被选中：可通过js操控点击后的选中切换
li a.active {background-color: #4CAF50;color: white;}
li a:hover:not(.active) {background-color: blue;color: white;}



